dependecies that is needed to be downloaded to run the project
-> pip install streamlit pypdf2 langchain python-dotenv openai huggingface_hub 
-> pip  install Instructorembedding sentence_transformers

to run streanlit app
->python -m streamlit run app.py
 
pytorch installatiion
-> pip uninstall torch
   pip install torch --no-cache-dir

langchain comunnity
-> pip install -U langchain-community

langchain hugging face
->pip install -U langchain-huggingface


version 1
import streamlit as st
# import torch
from dotenv import load_dotenv
from PyPDF2 import PdfReader
from langchain.text_splitter import CharacterTextSplitter
from langchain_community.embeddings import HuggingFaceEmbeddings
from InstructorEmbedding import INSTRUCTOR
from langchain_community.vectorstores import FAISS
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.embeddings import (
    # OpenAIEmbeddings,
    HuggingFaceInstructEmbeddings,
)  # Using OpenAIEmbeddings
import warnings

# Suppress specific warning
warnings.filterwarnings("ignore", message="`clean_up_tokenization_spaces` was not set.")


def get_pdf_text(pdf_docs):
    text = " "
    for pdf in pdf_docs:
        pdf_reader = PdfReader(pdf)
        for page in pdf_reader.pages:
            text += page.extract_text()
    return text


def get_text_chunks(text):
    text_splitter = CharacterTextSplitter(
        separator="\n", chunk_size=1000, chunk_overlap=200, length_function=len
    )
    chunks = text_splitter.split_text(text)
    return chunks


def get_vectorstore(text_chunks):
    # embeddings = OpenAIEmbeddings()  # Use OpenAIEmbeddings instead
    # embeddings = HuggingFaceInstructEmbeddings(model_name="hkunlp/instructor-large")
    embeddings = HuggingFaceEmbeddings(
        model_name="sentence-transformers/all-MiniLM-L6-v2"
    )
    vectorstore = FAISS.from_texts(texts=text_chunks, embedding=embeddings)
    return vectorstore


def main():
    load_dotenv()
    st.set_page_config(page_title="Chat with files", page_icon=":books:")

    st.header("Chat with files:books:")
    st.text_input("Ask question about your documents:")

    with st.sidebar:
        st.subheader("Your documents")
        pdf_docs = st.file_uploader(
            "Upload your file here and click on 'Process'", accept_multiple_files=True
        )
        if st.button("Process"):
            with st.spinner("Processing"):
                # get file text
                raw_text = get_pdf_text(pdf_docs)

                # get the text chunks
                text_chunks = get_text_chunks(raw_text)

                # create vector store
                vectorstore = get_vectorstore(text_chunks)


if __name__ == "__main__":
    main()
